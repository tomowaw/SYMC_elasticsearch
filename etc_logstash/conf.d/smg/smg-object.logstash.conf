
input {
    file { 
        path => "/var/log/smg.log-test"
        #path => "/var/logstash_input/smg.log-2*" 
        start_position => "beginning" 
        discover_interval => "1"
        sincedb_path => "/var/log/logstash/sincedb-smg-arch"

    }
}

filter {
    grok {
        break_on_match => true
        patterns_dir => ["/etc/logstash/conf.d/smg/smg_patterns"]
        # single lines
        match => { "message" => [
                "%{SMG_ACCEPT_OBJ_PTRN}",
                "%{SMG_EHLO_OBJ_PTRN}",
                "%{SMG_TLS_RECEIVED_OBJ_PTRN}",
		"%{SMG_TLS_DELIVERY_OBJ_PTRN}",
                "%{SMG_SUBJECT_OBJ_PTRN}",
                "%{SMG_SOURCE_OBJ_PTRN}",
                "%{SMG_SENDER_OBJ_PTRN}",                
                "%{SMG_MSGID_OBJ_PTRN}",
                "%{SMG_MSG_SIZE_OBJ_PTRN}",                
                "%{SMG_LOGICAL_IP_OBJ_PTRN}",
                "%{SMG_RECEIVED_OBJ_PTRN}",
                "%{SMG_UNSCANNABLE_OBJ_PTRN}",
                "%{SMG_SPF_OBJ_PTRN}",
                # singles to split
                "%{SMG_ATTACH_OBJ_PTRN}",   
		"%{SMG_ATTACHFILTER_OBJ_PTRN}",  
                "%{SMG_ORCPTS_OBJ_PTRN}",
                # multiple events per email
                "%{SMG_VERDICT_OBJ_PTRN}",
                "%{SMG_UNTESTED_OBJ_PTRN}",
                "%{SMG_TD_RESULT_OBJ_PTRN}",
                "%{SMG_IRCPTACTION_OBJ_PTRN}",
                "%{SMG_FIRED_OBJ_PTRN}",
                "%{SMG_TRACKERID_OBJ_PTRN}",
                "%{SMG_RESUBMIT_OBJ_PTRN}",
                "%{SMG_DELIVER_OBJ_PTRN}",
                "%{SMG_VIRUS_OBJ_PTRN}",
                "%{SMG_TRANS_FAILURE_OBJ_PTRN}",
                "%{SMG_DELIVERY_FAILURE_OBJ_PTRN}",
                "%{SMG_PMC_OBJ_PTRN}",
                "%{SMG_DKIM_OBJ_PTRN}",
#                "%{}",                "%{}",
#                "%{}",                "%{}",
#                "%{}",                "%{}",
#                "%{}",                "%{}",

 #        #everything else to bin
                "%{SMG_ELSE}"
        ]}

        add_field => [ "received_at", "%{@timestamp}" ]
        add_field => [ "received_from", "%{host}" ]
          
    }
    ruby {
        code => "event.set('smguid_date', event.get('smguid_date_hex').to_s.hex)"
    }
    
    date {
        match => [ "smguid_date", "UNIX" ]
        target => [ "@timestamp" ]
    }
 
    date {
        match => [ "[accept][date]", "UNIX" ]
        target => [ "[accept][date_formatted]" ]
	    add_field => [ "action_date", "%{[accept][date_formatted]}" ] 
    }
    
    date {
        match => [ "[ehlo][date]", "UNIX" ]
        target => [ "[ehlo][date_formatted]" ] 
        add_field => [ "action_date", "%{[ehlo][date_formatted]}" ]

    }

    date {
        match => [ "[tls_received][date]", "UNIX" ]
        target => [ "[tls_received][date_formatted]" ] 
        add_field => [ "action_date", "%{[tls_received][date_formatted]}" ]

    }

    date {
        match => [ "[subject][date]", "UNIX" ]
        target => [ "[subject][date_formatted]" ] 
        add_field => [ "action_date", "%{[subject][date_formatted]}" ]

    }    

    date {
        match => [ "[source][date]", "UNIX" ]
        target => [ "[source][date_formatted]" ] 
        add_field => [ "action_date", "%{[source][date_formatted]}" ]

    }    
    date { 
        match => [ "[sender][date]", "UNIX" ]
        target => [ "[sender][date_formatted]" ] 
        add_field => [ "action_date", "%{[sender][date_formatted]}" ]

    }    
    date {
        match => [ "[msgid][date]", "UNIX" ]
        target => [ "[msgid][date_formatted]" ] 
    }    
    date {
        match => [ "[msg_size][date]", "UNIX" ]
        target => [ "[msg_size][date_formatted]" ] 
    }    

    date {
        match => [ "[logical_ip][date]", "UNIX" ]
        target => [ "[logical_ip][date_formatted]" ] 
        add_field => [ "action_date", "%{[logical_ip][date_formatted]}" ]

    }

    date {
        match => [ "[received][date]", "UNIX" ]
        target => [ "[received][date_formatted]" ] 
        add_field => [ "action_date", "%{[received][date_formatted]}" ]

    }        

    date {
        match => [ "[unscannable][date]", "UNIX" ]
        target => [ "[unscannable][date_formatted]" ] 
        add_field => [ "action_date", "%{[unscannable][date_formatted]}" ]
    }        
    
    date {
        match => [ "[spf][date]", "UNIX" ]
        target => [ "[spf][date_formatted]" ]
	    add_field => [ "action_date", "%{[spf][date_formatted]}" ] 
    }

#singles to split
    date {
        match => [ "[attach][date]", "UNIX" ]
        target => [ "[attach][date_formatted]" ] 
        add_field => [ "action_date", "%{[attach][date_formatted]}" ]

    }        
    date {
        match => [ "[orcpts][date]", "UNIX" ]
        target => [ "[orcpts][date_formatted]" ] 
        add_field => [ "action_date", "%{[orcpts][date_formatted]}" ]

    }        

# multiple events per email
    date {
        match => [ "[verdict][date]", "UNIX" ]
        target => [ "[verdict][date_formatted]" ] 
        add_field => [ "action_date", "%{[verdict][date_formatted]}" ]

    }            

    date {
        match => [ "[untested][date]", "UNIX" ]
        target => [ "[untested][date_formatted]" ] 
        add_field => [ "action_date", "%{[untested][date_formatted]}" ]

    }            

    date {
        match => [ "[td_result][date]", "UNIX" ]
        target => [ "[td_result][date_formatted]" ] 
        add_field => [ "action_date", "%{[td_result][date_formatted]}" ]

    }

    date {
        match => [ "[td_result][timestamp1]", "UNIX" ]
        target => [ "[td_result][timestamp1_formatted]" ] 

    }

    date {
        match => [ "[td_result][timestamp2]", "UNIX" ]
        target => [ "[td_result][timestamp2_formatted]" ] 
    }

    date {
        match => [ "[ircptaction][date]", "UNIX" ]
        target => [ "[ircptaction][date_formatted]" ] 
        add_field => [ "action_date", "%{[ircptaction][date_formatted]}" ]

    }

    date {
        match => [ "[fired][date]", "UNIX" ]
        target => [ "[fired][date_formatted]" ] 
        add_field => [ "action_date", "%{[fired][date_formatted]}" ]

    }

    date {
        match => [ "[trackerid][date]", "UNIX" ]
        target => [ "[trackerid][date_formatted]" ] 
        add_field => [ "action_date", "%{[trackerid][date_formatted]}" ]

    }

    date {
        match => [ "[resubmit][date]", "UNIX" ]
        target => [ "[resubmit][date_formatted]" ] 
        add_field => [ "action_date", "%{[resubmit][date_formatted]}" ]

    }

    date {
        match => [ "[deliver][date]", "UNIX" ]
        target => [ "[deliver][date_formatted]" ] 
        add_field => [ "action_date", "%{[deliver][date_formatted]}" ]

    }

    date {
        match => [ "[virus][date]", "UNIX" ]
        target => [ "[virus][date_formatted]" ] 
        add_field => [ "action_date", "%{[virus][date_formatted]}" ]

    }

    date {
        match => [ "[trans_failure][date]", "UNIX" ]
        target => [ "[trans_failure][date_formatted]" ] 
        add_field => [ "action_date", "%{[trans_failure][date_formatted]}" ]

    }

    date {
        match => [ "[delivery_failure][date]", "UNIX" ]
        target => [ "[delivery_failure][date_formatted]" ] 
        add_field => [ "action_date", "%{[delivery_failure][date_formatted]}" ]
    }
    
    date {
        match => [ "[disarm][date]", "UNIX" ]
        target => [ "[disarm][date_formatted]" ] 
        add_field => [ "action_date", "%{[disarm][date_formatted]}" ]

    }
    
    date {
        match => [ "[dkim][date]", "UNIX" ]
        target => [ "[dkim][date_formatted]" ] 
        add_field => [ "action_date", "%{[dkim][date_formatted]}" ]

    }



# finishing touch - split what needs to be splitted
    mutate { 
        split => ["[attach][attachments]","|"]
        split => ["[orcpts][recipients]", "|"]  
        split => ["[untested][untested]","|"]
        split => ["[ircptaction][ircptaction]","|"]      
        split => ["[disarm][parts]","|"]
    }   

    if [action]=="LOGICAL_IP"  {
        geoip {
            source=> "[logical_ip][logical_ip]"
            target=> "[logical_ip][logical_ip_geoip]"
        } 
           if [logical_ip][logical_ip] =~ /^10\./ {
            mutate { replace      => { "[logical_ip][logical_ip_geoip][timezone]"      => "Europe/Poland" } }
            mutate { replace      => { "[logical_ip][logical_ip_geoip][country_name]"  => "Internal Addresses" } }
            mutate { replace      => { "[logical_ip][logical_ip_geoip][country_code2]" => "WPL" } }
            mutate { replace      => { "[logical_ip][logical_ip_geoip][country_code3]" => "WPL" } }
            mutate { remove_field => [ "[logical_ip][logical_ip_geoip][location]" ] }
            mutate { add_field    => { "[logical_ip][logical_ip_geoip][location]"      => "170.525" } }
            mutate { add_field    => { "[logical_ip][logical_ip_geoip][location]"      => "-45.865" } }
            mutate { convert      => [ "[logical_ip][logical_ip_geoip][location]",        "float" ] }
            mutate { replace      => [ "[logical_ip][logical_ip_geoip][latitude]",        -45.856 ] }
            mutate { convert      => [ "[logical_ip][logical_ip_geoip][latitude]",        "float" ] }
            mutate { replace      => [ "[logical_ip][logical_ip_geoip][longitude]",       170.525 ] }
            mutate { convert      => [ "[logical_ip][logical_ip_geoip][longitude]",       "float" ] }
        }
    }

    if [action]=="DELIVER"{
        geoip { 
                source=> "[deliver][deliver_ip]"
                target=> "[deliver][deliver_ip_geoip]"
        }
        if [deliver][deliver_ip] =~ /^10\./ {
            mutate { replace      => { "[deliver][deliver_ip_geoip][timezone]"      => "Europe/Poland" } }
            mutate { replace      => { "[deliver][deliver_ip_geoip][country_name]"  => "Internal Addresses" } }
            mutate { replace      => { "[deliver][deliver_ip_geoip][country_code2]" => "WPL" } }
            mutate { replace      => { "[deliver][deliver_ip_geoip][country_code3]" => "WPL" } }
            mutate { remove_field => [ "[deliver][deliver_ip_geoip][location]" ] }
            mutate { add_field    => { "[deliver][deliver_ip_geoip][location]"      => "170.525" } }
            mutate { add_field    => { "[deliver][deliver_ip_geoip][location]"      => "-45.865" } }
            mutate { convert      => [ "[deliver][deliver_ip_geoip][location]",        "float" ] }
            mutate { replace      => [ "[deliver][deliver_ip_geoip][latitude]",        -45.856 ] }
            mutate { convert      => [ "[deliver][deliver_ip_geoip][latitude]",        "float" ] }
            mutate { replace      => [ "[deliver][deliver_ip_geoip][longitude]",       170.525 ] }
            mutate { convert      => [ "[deliver][deliver_ip_geoip][longitude]",       "float" ] }
        }
    }

    if [action]=="ACCEPT" {
        geoip {
            source=> "[accept][accept_ip]"
            target=> "[accept][accept_ip_geoip]"
        }
        if [accept][accept_ip] =~ /^10\./ {
            mutate { replace      => { "[accept][accept_ip_geoip][timezone]"      => "Europe/Poland" } }
            mutate { replace      => { "[accept][accept_ip_geoip][country_name]"  => "Internal Addresses" } }
            mutate { replace      => { "[accept][accept_ip_geoip][country_code2]" => "WPL" } }
            mutate { replace      => { "[accept][accept_ip_geoip][country_code3]" => "WPL" } }
            mutate { remove_field => [ "[accept][accept_ip_geoip][location]" ] }
            mutate { add_field    => { "[accept][accept_ip_geoip][location]"      => "170.525" } }
            mutate { add_field    => { "[accept][accept_ip_geoip][location]"      => "-45.865" } }
            mutate { convert      => [ "[accept][accept_ip_geoip][location]",        "float" ] }
            mutate { replace      => [ "[accept][accept_ip_geoip][latitude]",        -45.856 ] }
            mutate { convert      => [ "[accept][accept_ip_geoip][latitude]",        "float" ] }
            mutate { replace      => [ "[accept][accept_ip_geoip][longitude]",       170.525 ] }
            mutate { convert      => [ "[accept][accept_ip_geoip][longitude]",       "float" ] }
        }
    }
     
   if [_else] {
    #      drop {}
        # mutate {add_field => { "action" => "PARSE_ERROR" }}
        mutate { add_tag => "PARSE_ERROR" }
   } 
     
    mutate {
          add_field => { "[@metadata][action]" => "%{action}" }
    }
    
    mutate { 
          lowercase => [ "[@metadata][action]" ] 
    }

}


output {
    stdout { codec => rubydebug } 
    
    if "PARSE_ERROR" not in [tags] { 
        elasticsearch {
            hosts => ["localhost:9200"]
            #index => "smg-%{[@metadata][action]}-%{+YYYY.MM.dd}"
            index => "smg-object-%{+YYYY.MM.dd}"
            action => "update"
            # To-Do - change this to actually create the doc by script. It needs the script to have all the fields included... like @timestamp and recived by and such.
            #doc_as_upsert => true
            scripted_upsert => true
            document_id => "%{smguid}"
            retry_on_conflict => 100 
            script_lang => "painless"
            script_type => "inline"
            script_var_name => "event"
            script => '
                if (!ctx._source.containsKey("log_lines")){
                    //if we are here then this is completly new event. Lets set things up.
                    ctx._source.put("log_lines", new ArrayList());
                    ctx._source.put("verdicts", new ArrayList());
                    ctx._source.put("untesteds", new ArrayList());
                    ctx._source.put("td_results", new ArrayList());
                    ctx._source.put("ircptactions", new ArrayList());
                    ctx._source.put("fireds", new ArrayList());
                    ctx._source.put("trackerids", new ArrayList());
                    ctx._source.put("resubmits", new ArrayList());
                    ctx._source.put("delivers", new ArrayList());
                    ctx._source.put("viruses", new ArrayList());
                    ctx._source.put("trans_failures", new ArrayList());
                    ctx._source.put("delivery_failures", new ArrayList());
                    ctx._source.put("disarms", new ArrayList());
                    ctx._source.put("dkims", new ArrayList());
                    ctx._source.received_first_event = params.event.received_at;
                    ctx._source.first_event_date = params.event.action_date;
                }
                ctx._source.log_lines.add(params.event.message);
                ctx._source.received_last_event = params.event.received_at;
                ctx._source.last_event_date = params.event.action_date;
                ctx._source.timestamp = params.event.smguid_date_formated;

                if (params.event.containsKey("accept")) {ctx._source.accept = params.event.accept;}
                if (params.event.containsKey("ehlo")) {ctx._source.ehlo = params.event.ehlo;}
                if (params.event.containsKey("tls_received")) {ctx._source.tls_received = params.event.tls_received;}
                if (params.event.containsKey("subject")) {ctx._source.subject = params.event.subject;}
                if (params.event.containsKey("source")) {ctx._source.source = params.event.source;}
                if (params.event.containsKey("sender")) {ctx._source.sender = params.event.sender;}
                if (params.event.containsKey("msgid")) {ctx._source.msgid = params.event.msgid;}
                if (params.event.containsKey("msg_size")) {ctx._source.msg_size = params.event.msg_size;}
                if (params.event.containsKey("logical_ip")) {ctx._source.logical_ip = params.event.logical_ip;}
                if (params.event.containsKey("received")) {ctx._source.received = params.event.received;}
                if (params.event.containsKey("unscannable")) {ctx._source.unscannable = params.event.unscannable;}
                
    
        //singles to split
                if (params.event.containsKey("attach")) {ctx._source.attach = params.event.attach;}
                if (params.event.containsKey("orcpts")) {ctx._source.orcpts = params.event.orcpts;}
       
        // multiple events per email
                if (params.event.containsKey("verdict")) {ctx._source.verdicts.add(params.event.verdict);}
                if (params.event.containsKey("untested")) {ctx._source.untesteds.add(params.event.untested);}
                // large td_results cause ES to hand on scripted update. This needs to be analized if CAS is present. 
                //if (params.event.containsKey("td_result")) {ctx._source.td_results.add(params.event.td_result);}
                if (params.event.containsKey("ircptaction")) {ctx._source.ircptactions.add(params.event.ircptaction);}
                if (params.event.containsKey("fired")) {ctx._source.fireds.add(params.event.fired);}
                if (params.event.containsKey("trackerid")) {ctx._source.trackerids.add(params.event.trackerid);}
                if (params.event.containsKey("resubmit")) {ctx._source.resubmits.add(params.event.resubmit);}
                if (params.event.containsKey("deliver")) {ctx._source.delivers.add(params.event.deliver);}
                if (params.event.containsKey("virus")) {ctx._source.viruses.add(params.event.virus);}
                if (params.event.containsKey("trans_failure")) {ctx._source.trans_failures.add(params.event.trans_failure);}
                if (params.event.containsKey("delivery_failure")) {ctx._source.delivery_failures.add(params.event.delivery_failure);}
                if (params.event.containsKey("disarm")) {ctx._source.disarms.add(params.event.disarm);}
                if (params.event.containsKey("dkim")) {ctx._source.dkims.add(params.event.dkim);}
                '
                sniffing => true 


         }
    } else {
        elasticsearch {
              hosts => ["localhost:9200"]
              #index => "smg-%{[@metadata][action]}-%{+YYYY.MM.dd}"
              index => "smg-error-object-%{+YYYY.MM.dd}"
            doc_as_upsert => true
            retry_on_conflict => 100
        }
    }
}
#output {
#    stdout { codec => rubydebug } 
#    if "PARSE_ERROR" in [tags] {
#        elasticsearch {
#              hosts => ["localhost:9200"]
#              #index => "smg-%{[@metadata][action]}-%{+YYYY.MM.dd}"
#              index => "smg-error-object-%{+YYYY.MM.dd}"
#            doc_as_upsert => true
#            retry_on_conflict => 100
#        }
#    }
#
#}
